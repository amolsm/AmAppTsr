@model Tsr.Core.Models.AddmissionCetCreateVM

@{
    ViewBag.Title = "Cet Schedule List";
}

<!-- START BREADCRUMB -->
<ul class="breadcrumb push-down-0">
    <li><a href="#">Home</a></li>
    <li><a href="#">Addmission</a></li>
    <li><a href="#">Cet Entrance Schedule</a></li>
    @*<li class="active">Error 404</li>*@
</ul>
<!-- END BREADCRUMB -->
<!-- PAGE CONTENT WRAPPER -->
<div class="page-content-wrap">
    <div>
        <div class="row">
            <div class="col-md-12">

                <div class="form-horizontal">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title">Cet Schedule List</h3>

                        </div>

                        <div class="panel-body">
                            <div class="row">

                                @using (Html.BeginForm("CETSchedule", "Admission", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.HiddenFor(model => model.CetId)


                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="col-xs-6 form-group">
                                        @Html.LabelFor(model => model.CetCode, htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-6">
                                            @Html.EditorFor(model => model.CetCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CetCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.DropDownListFor(model => model.CourseId,
                        (IEnumerable<SelectListItem>)ViewBag.Course, " ", new { @class = "form-control", @onchange = "FillBatchs()" })
                                                @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.BatchId, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.DropDownListFor(model => model.BatchId, (IEnumerable<SelectListItem>)ViewBag.Batches, " ", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>



                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.CetDates, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.TextBoxFor(model => model.CetDates, new { @class = "form-control", @type = "Date" })
                                                @Html.ValidationMessageFor(model => model.CetDates, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.CetTime, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.TextBoxFor(model => model.CetTime, new { @class = "form-control", @type = "time" })
                                                @Html.ValidationMessageFor(model => model.CetTime, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.Venue, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.TextBoxFor(model => model.Venue, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Venue, "", new { @class = "text-danger" })
                                            </div>
                                        </div>



                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-xs-6 form-group">
                                            @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-3" })
                                            <div class="col-md-6">
                                                @Html.TextBoxFor(m => m.FileUpload, new { type = "file", @onchange = "CheckValidation()" })

                                                @Html.ValidationMessageFor(m => m.FileUpload, string.Empty, new { id = "validationTxt", @class = "text-danger" })
                                            </div>
                                        </div>


                                        <div class="col-xs-5 form-group pull-right">
                                            <input class="btn btn-primary" type="submit" name="submit" />
                                        </div>


                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group pull-right">



                                    <div class="col-md-3">
                                        <div class="input-group">
                                            <span class="input-group-addon"><span>Course</span></span>
                                            @Html.DropDownList("CourseIds",
                                         (IEnumerable<SelectListItem>)ViewBag.Courses, "Select Course", new { @class = "form-control", @onchange = "FillBatch()" })
                                        </div>

                                    </div>

                                    <div class="col-md-3">
                                        <div class="input-group">
                                            <span class="input-group-addon"><span>Batch</span></span>
                                            @Html.DropDownList("BatchIds",
            new SelectList(Enumerable.Empty<SelectListItem>(), "BatchId", "BatchCode")," ", new { @class = "form-control" })
                                        </div>

                                    </div>

                                    <div class="col-md-3">
                                        <div class="input-group">
                                            <input class="btn btn-primary" type="button" value="Search" onclick="Search()" />
                                        </div>

                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="panel">
                            <div>
                                <h3 class="panel-title">Cet Schedule List</h3>
                                <div id="dvResult">
                                    @{Html.RenderPartial("_CetScheduleList", Model._AddmissionCetListVM);}
                                    <script src="~/Scripts/js/plugins/datatables/jquery.dataTables.min.js"></script>
                                </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </div>






<!-- END PAGE CONTENT WRAPPER -->
<!-- MODALS -->



<script src="~/Scripts/js/plugins/bootstrap/bootstrap-select.js"></script>
<script src="~/Scripts/ModalForm.js"></script>
<script>
function Search() {
      var BatchId = $('#BatchIds').val();

      $("#dvResult").load('@(Url.Action("GetCetScheduleList", "Admission", null, Request.Url.Scheme))?BatchId=' + BatchId);
   
}
    function FillBatch() {
       
        var CourseId = $("#CourseIds").val();
        $.ajax({
            url: '/Admission/FillBatchForCet',
            type: "GET",
            dataType: "JSON",
            data: { CourseId: CourseId },
            success: function (Batches) {
                $("#BatchIds").html(""); // clear before appending new list
                $.each(Batches, function (i, c) {
                    $("#BatchIds").append(
                        $('<option></option>').val(c.BatchId).html(c.BatchCode));
                });
            }
        });
    }
</script>
<script>
    function FillBatchs() {
        debugger;
        var CourseId = $('#CourseId').val();
    $.ajax({
        url: '/Admission/FillBatchForCet',
        type: "GET",
        dataType: "JSON",
        data: { CourseId: CourseId },
        success: function (Batches) {
            $("#BatchId").html(""); // clear before appending new list
            $.each(Batches, function (i, c) {
                $("#BatchId").append(
                    $('<option></option>').val(c.BatchId).html(c.BatchCode));
            });
        }
    });
    }
    function CheckValidation()
    {
        var file = getNameFromPath($('#FileUpload').val());
        if (file != null) {
            var extension = file.substr((file.lastIndexOf('.') + 1));
            switch (extension) {
                case 'doc':
                case 'docx':

                    flag = true;
                    break;
                default:
                    flag = false;
            }
        }
        if (flag == false) {
            $("#validationTxt").text("You can upload only doc,docx extension file");
            $("#FileUpload").html("")
            return false;
        }

    }


    //get file path from client system
    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }
</script>

 




