@model Tsr.Core.Models.AddmissionCetCreateVM

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/js/plugins/bootstrap/bootstrap-select.js"></script>

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">New Cet Schedule </h4>
</div>
@using (Html.BeginForm("CetCreate", "Admission", FormMethod.Post, new { enctype = "multipart/form-data"}))
{
    @Html.AntiForgeryToken()
    <div class="modal-body">
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            <div class="form-group">
                @Html.LabelFor(model => model.CetCode, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CetCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CetCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.CourseId,
                        (IEnumerable<SelectListItem>)ViewBag.Course, " ", new { @class = "form-control", @onchange = "FillBatchs()" })
                    @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BatchId, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.BatchId, new SelectList(Enumerable.Empty<SelectListItem>(), "BatchId", "BatchCode"), " ", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                </div>
            </div>

           

            <div class="form-group">
                @Html.LabelFor(model => model.CetDate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.CetDate, new { @class = "form-control", @type = "Date" })
                    @Html.ValidationMessageFor(model => model.CetDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CetTime, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.CetTime, new { @class = "form-control", @type = "time" })
                    @Html.ValidationMessageFor(model => model.CetTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Venue, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Venue, new { @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Venue, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
          
            <div class="form-group">
                @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.TextBoxFor(m => m.FileUpload, new { type = "file", @onchange = "CheckValidation()" })
                    
                    @Html.ValidationMessageFor(m => m.FileUpload, string.Empty, new { id = "validationTxt", @class = "text-danger" })
                </div>
            </div>
                


            </div>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Cancel</button>
        <input class="btn btn-primary" type="submit" value="Save" />
    </div>
}

<script>
    function FillBatchs() {
        debugger;
        var CourseId = $('#CourseId').val();
    $.ajax({
        url: '/Admission/FillBatchForCet',
        type: "GET",
        dataType: "JSON",
        data: { CourseId: CourseId },
        success: function (Batches) {
            $("#BatchId").html(""); // clear before appending new list
            $.each(Batches, function (i, c) {
                $("#BatchId").append(
                    $('<option></option>').val(c.BatchId).html(c.BatchCode));
            });
        }
    });
    }
    function CheckValidation()
    {
        var file = getNameFromPath($('#FileUpload').val());
        if (file != null) {
            var extension = file.substr((file.lastIndexOf('.') + 1));
            switch (extension) {
                case 'doc':
                case 'docx':

                    flag = true;
                    break;
                default:
                    flag = false;
            }
        }
        if (flag == false) {
            $("#validationTxt").text("You can upload only doc,docx extension file");
            $("#FileUpload").html("")
            return false;
        }
        else {
            var size = GetFileSize(file);
            if (size > 3) {
                $("#validationTxt").text("You can upload file up to 1 MB");
                $("#FileUpload").html("")
            }
            else {
                $("#validationTxt").text("");
            }
        }
    }
    function GetFileSize(fileid) {
        try {
            var fileSize = 0;
            //for IE
            if ($.browser.msie) {
                //before making an object of ActiveXObject,
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                fileSize = fileSize / 1048576; //size in mb
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $("#" + fileid)[0].files[0].size //size in kb
                fileSize = fileSize / 1048576; //size in mb
            }

            return fileSize;
        }
        catch (e) {
            alert("Error is :" + e);
        }
    }

    //get file path from client system
    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }
</script>


