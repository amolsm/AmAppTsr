@model Tsr.Core.Models.AdmissionInterviewScheduleVM

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">Add New Interview</h4>
</div>
<div class="modal-body">

    <div class="form-horizontal">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()



            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.InterviewCode, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.InterviewCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.InterviewCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.CourseId,
                  (IEnumerable<SelectListItem>)ViewBag.Course, " ", new { @class = "form-control", @onchange = "FillBatch()" })
                    @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BatchId, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">

                    @Html.DropDownList("BatchId",
                                   (IEnumerable<SelectListItem>)ViewBag.Batches, "Select Batch", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.InterviewDate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.InterviewDate, "{0:dd/MM/yyyy}", new { htmlAttributes = new { @class = "form-control", @type = "Date" } })
                    @*@Html.EditorFor(model => model.InterviewDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.InterviewDate, "", new { @class = "text-danger" })*@

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.InterviewTime, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.InterviewTime, new { htmlAttributes = new { @class = "form-control", @type = "Time" } })
                        @Html.ValidationMessageFor(model => model.InterviewTime, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Venue, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Venue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Venue, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.FileUpload, new { type = "file", @onchange = "CheckValidation()" })

                    @Html.ValidationMessageFor(m => m.FileUpload, string.Empty, new { id = "validationTxt", @class = "text-danger" })
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal">Cancel</button>
                <input class="btn btn-primary" type="submit" data-loading-text="Processing" value="Save" />
            </div>
        }
        </div>

     
      
    </div>
       
        <script>
            function FillBatch() {
                debugger;
                var CourseId = $('#CourseId').val();
                $.ajax({
                    url: '/Admission/FillBatchForCet',
                    type: "GET",
                    dataType: "JSON",
                    data: { CourseId: CourseId },
                    success: function (Batches) {
                        $("#BatchId").html(""); // clear before appending new list
                        $.each(Batches, function (i, c) {
                            $("#BatchId").append(
                                $('<option></option>').val(c.BatchId).html(c.BatchCode));
                        });
                    }
                });
            }
            function CheckValidation() {
                var file = getNameFromPath($('#FileUpload').val());
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {
                        case 'doc':
                        case 'docx':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }
                if (flag == false) {
                    $("#validationTxt").text("You can upload only doc,docx extension file");
                    $("#FileUpload").html("")
                    return false;
                }

            }


            //get file path from client system
            function getNameFromPath(strFilepath) {
                var objRE = new RegExp(/([^\/\\]+)$/);
                var strName = objRE.exec(strFilepath);

                if (strName == null) {
                    return null;
                }
                else {
                    return strName[0];
                }
            }
        </script>
        <script src="~/Scripts/js/plugins/bootstrap/bootstrap-select.js"></script>
        <script src="~/Scripts/ModalForm.js"></script>
        <script>
            $('.btn').on('click', function () {
                var $this = $(this);
                $this.button('loading');
                setTimeout(function () {
                    $this.button('reset');
                }, 8000);
            });
        </script>
